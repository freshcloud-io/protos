// Code generated by MockGen. DO NOT EDIT.
// Source: ../proto/freshcloud/freshcloud_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	freshcloud "github.com/freshcloud-io/protos/go/freshcloud"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockFreshcloudClient is a mock of FreshcloudClient interface.
type MockFreshcloudClient struct {
	ctrl     *gomock.Controller
	recorder *MockFreshcloudClientMockRecorder
}

// MockFreshcloudClientMockRecorder is the mock recorder for MockFreshcloudClient.
type MockFreshcloudClientMockRecorder struct {
	mock *MockFreshcloudClient
}

// NewMockFreshcloudClient creates a new mock instance.
func NewMockFreshcloudClient(ctrl *gomock.Controller) *MockFreshcloudClient {
	mock := &MockFreshcloudClient{ctrl: ctrl}
	mock.recorder = &MockFreshcloudClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFreshcloudClient) EXPECT() *MockFreshcloudClientMockRecorder {
	return m.recorder
}

// ConsumeValuesQueue mocks base method.
func (m *MockFreshcloudClient) ConsumeValuesQueue(ctx context.Context, in *freshcloud.ConsumeValuesQueueRequest, opts ...grpc.CallOption) (freshcloud.Freshcloud_ConsumeValuesQueueClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConsumeValuesQueue", varargs...)
	ret0, _ := ret[0].(freshcloud.Freshcloud_ConsumeValuesQueueClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsumeValuesQueue indicates an expected call of ConsumeValuesQueue.
func (mr *MockFreshcloudClientMockRecorder) ConsumeValuesQueue(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeValuesQueue", reflect.TypeOf((*MockFreshcloudClient)(nil).ConsumeValuesQueue), varargs...)
}

// CreateApp mocks base method.
func (m *MockFreshcloudClient) CreateApp(ctx context.Context, in *freshcloud.CreateAppRequest, opts ...grpc.CallOption) (*freshcloud.CreateAppResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateApp", varargs...)
	ret0, _ := ret[0].(*freshcloud.CreateAppResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApp indicates an expected call of CreateApp.
func (mr *MockFreshcloudClientMockRecorder) CreateApp(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApp", reflect.TypeOf((*MockFreshcloudClient)(nil).CreateApp), varargs...)
}

// DeleteApp mocks base method.
func (m *MockFreshcloudClient) DeleteApp(ctx context.Context, in *freshcloud.DeleteAppRequest, opts ...grpc.CallOption) (*freshcloud.DeleteAppResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApp", varargs...)
	ret0, _ := ret[0].(*freshcloud.DeleteAppResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApp indicates an expected call of DeleteApp.
func (mr *MockFreshcloudClientMockRecorder) DeleteApp(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApp", reflect.TypeOf((*MockFreshcloudClient)(nil).DeleteApp), varargs...)
}

// DeleteValueDictionary mocks base method.
func (m *MockFreshcloudClient) DeleteValueDictionary(ctx context.Context, in *freshcloud.DeleteValueDictionaryRequest, opts ...grpc.CallOption) (*freshcloud.DeleteValueDictionaryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteValueDictionary", varargs...)
	ret0, _ := ret[0].(*freshcloud.DeleteValueDictionaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteValueDictionary indicates an expected call of DeleteValueDictionary.
func (mr *MockFreshcloudClientMockRecorder) DeleteValueDictionary(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteValueDictionary", reflect.TypeOf((*MockFreshcloudClient)(nil).DeleteValueDictionary), varargs...)
}

// DeployApp mocks base method.
func (m *MockFreshcloudClient) DeployApp(ctx context.Context, in *freshcloud.DeployAppRequest, opts ...grpc.CallOption) (*freshcloud.DeployAppResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeployApp", varargs...)
	ret0, _ := ret[0].(*freshcloud.DeployAppResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeployApp indicates an expected call of DeployApp.
func (mr *MockFreshcloudClientMockRecorder) DeployApp(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployApp", reflect.TypeOf((*MockFreshcloudClient)(nil).DeployApp), varargs...)
}

// ExistsValueDictionary mocks base method.
func (m *MockFreshcloudClient) ExistsValueDictionary(ctx context.Context, in *freshcloud.ExistsValueDictionaryRequest, opts ...grpc.CallOption) (*freshcloud.ExistsValueDictionaryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExistsValueDictionary", varargs...)
	ret0, _ := ret[0].(*freshcloud.ExistsValueDictionaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsValueDictionary indicates an expected call of ExistsValueDictionary.
func (mr *MockFreshcloudClientMockRecorder) ExistsValueDictionary(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsValueDictionary", reflect.TypeOf((*MockFreshcloudClient)(nil).ExistsValueDictionary), varargs...)
}

// GetValueDictionary mocks base method.
func (m *MockFreshcloudClient) GetValueDictionary(ctx context.Context, in *freshcloud.GetValueDictionaryRequest, opts ...grpc.CallOption) (*freshcloud.GetValueDictionaryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetValueDictionary", varargs...)
	ret0, _ := ret[0].(*freshcloud.GetValueDictionaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValueDictionary indicates an expected call of GetValueDictionary.
func (mr *MockFreshcloudClientMockRecorder) GetValueDictionary(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValueDictionary", reflect.TypeOf((*MockFreshcloudClient)(nil).GetValueDictionary), varargs...)
}

// LengthDictionary mocks base method.
func (m *MockFreshcloudClient) LengthDictionary(ctx context.Context, in *freshcloud.LengthDictionaryRequest, opts ...grpc.CallOption) (*freshcloud.LengthDictionaryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LengthDictionary", varargs...)
	ret0, _ := ret[0].(*freshcloud.LengthDictionaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LengthDictionary indicates an expected call of LengthDictionary.
func (mr *MockFreshcloudClientMockRecorder) LengthDictionary(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LengthDictionary", reflect.TypeOf((*MockFreshcloudClient)(nil).LengthDictionary), varargs...)
}

// ListApps mocks base method.
func (m *MockFreshcloudClient) ListApps(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*freshcloud.ListAppsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApps", varargs...)
	ret0, _ := ret[0].(*freshcloud.ListAppsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApps indicates an expected call of ListApps.
func (mr *MockFreshcloudClientMockRecorder) ListApps(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApps", reflect.TypeOf((*MockFreshcloudClient)(nil).ListApps), varargs...)
}

// LoadSecretsFromAPI mocks base method.
func (m *MockFreshcloudClient) LoadSecretsFromAPI(ctx context.Context, in *freshcloud.LoadSecretsFromAPIRequest, opts ...grpc.CallOption) (*freshcloud.LoadSecretsFromAPIResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoadSecretsFromAPI", varargs...)
	ret0, _ := ret[0].(*freshcloud.LoadSecretsFromAPIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadSecretsFromAPI indicates an expected call of LoadSecretsFromAPI.
func (mr *MockFreshcloudClientMockRecorder) LoadSecretsFromAPI(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadSecretsFromAPI", reflect.TypeOf((*MockFreshcloudClient)(nil).LoadSecretsFromAPI), varargs...)
}

// LogsApp mocks base method.
func (m *MockFreshcloudClient) LogsApp(ctx context.Context, in *freshcloud.LogsAppRequest, opts ...grpc.CallOption) (freshcloud.Freshcloud_LogsAppClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LogsApp", varargs...)
	ret0, _ := ret[0].(freshcloud.Freshcloud_LogsAppClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogsApp indicates an expected call of LogsApp.
func (mr *MockFreshcloudClientMockRecorder) LogsApp(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogsApp", reflect.TypeOf((*MockFreshcloudClient)(nil).LogsApp), varargs...)
}

// Ping mocks base method.
func (m *MockFreshcloudClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*freshcloud.PingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*freshcloud.PingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockFreshcloudClientMockRecorder) Ping(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockFreshcloudClient)(nil).Ping), varargs...)
}

// PopValueDictionary mocks base method.
func (m *MockFreshcloudClient) PopValueDictionary(ctx context.Context, in *freshcloud.PopValueDictionaryRequest, opts ...grpc.CallOption) (*freshcloud.PopValueDictionaryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PopValueDictionary", varargs...)
	ret0, _ := ret[0].(*freshcloud.PopValueDictionaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PopValueDictionary indicates an expected call of PopValueDictionary.
func (mr *MockFreshcloudClientMockRecorder) PopValueDictionary(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PopValueDictionary", reflect.TypeOf((*MockFreshcloudClient)(nil).PopValueDictionary), varargs...)
}

// ProduceValueQueue mocks base method.
func (m *MockFreshcloudClient) ProduceValueQueue(ctx context.Context, in *freshcloud.ProduceValueQueueRequest, opts ...grpc.CallOption) (*freshcloud.ProduceValueQueueResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProduceValueQueue", varargs...)
	ret0, _ := ret[0].(*freshcloud.ProduceValueQueueResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProduceValueQueue indicates an expected call of ProduceValueQueue.
func (mr *MockFreshcloudClientMockRecorder) ProduceValueQueue(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceValueQueue", reflect.TypeOf((*MockFreshcloudClient)(nil).ProduceValueQueue), varargs...)
}

// PutValueDictionary mocks base method.
func (m *MockFreshcloudClient) PutValueDictionary(ctx context.Context, in *freshcloud.PutValueDictionaryRequest, opts ...grpc.CallOption) (*freshcloud.PutValueDictionaryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutValueDictionary", varargs...)
	ret0, _ := ret[0].(*freshcloud.PutValueDictionaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutValueDictionary indicates an expected call of PutValueDictionary.
func (mr *MockFreshcloudClientMockRecorder) PutValueDictionary(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutValueDictionary", reflect.TypeOf((*MockFreshcloudClient)(nil).PutValueDictionary), varargs...)
}

// StopApp mocks base method.
func (m *MockFreshcloudClient) StopApp(ctx context.Context, in *freshcloud.StopAppRequest, opts ...grpc.CallOption) (*freshcloud.StopAppResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopApp", varargs...)
	ret0, _ := ret[0].(*freshcloud.StopAppResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopApp indicates an expected call of StopApp.
func (mr *MockFreshcloudClientMockRecorder) StopApp(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopApp", reflect.TypeOf((*MockFreshcloudClient)(nil).StopApp), varargs...)
}

// MockFreshcloud_LogsAppClient is a mock of Freshcloud_LogsAppClient interface.
type MockFreshcloud_LogsAppClient struct {
	ctrl     *gomock.Controller
	recorder *MockFreshcloud_LogsAppClientMockRecorder
}

// MockFreshcloud_LogsAppClientMockRecorder is the mock recorder for MockFreshcloud_LogsAppClient.
type MockFreshcloud_LogsAppClientMockRecorder struct {
	mock *MockFreshcloud_LogsAppClient
}

// NewMockFreshcloud_LogsAppClient creates a new mock instance.
func NewMockFreshcloud_LogsAppClient(ctrl *gomock.Controller) *MockFreshcloud_LogsAppClient {
	mock := &MockFreshcloud_LogsAppClient{ctrl: ctrl}
	mock.recorder = &MockFreshcloud_LogsAppClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFreshcloud_LogsAppClient) EXPECT() *MockFreshcloud_LogsAppClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockFreshcloud_LogsAppClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockFreshcloud_LogsAppClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockFreshcloud_LogsAppClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockFreshcloud_LogsAppClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFreshcloud_LogsAppClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFreshcloud_LogsAppClient)(nil).Context))
}

// Header mocks base method.
func (m *MockFreshcloud_LogsAppClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockFreshcloud_LogsAppClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockFreshcloud_LogsAppClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockFreshcloud_LogsAppClient) Recv() (*freshcloud.LogsAppResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*freshcloud.LogsAppResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockFreshcloud_LogsAppClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockFreshcloud_LogsAppClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockFreshcloud_LogsAppClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockFreshcloud_LogsAppClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFreshcloud_LogsAppClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockFreshcloud_LogsAppClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockFreshcloud_LogsAppClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFreshcloud_LogsAppClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockFreshcloud_LogsAppClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockFreshcloud_LogsAppClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockFreshcloud_LogsAppClient)(nil).Trailer))
}

// MockFreshcloud_ConsumeValuesQueueClient is a mock of Freshcloud_ConsumeValuesQueueClient interface.
type MockFreshcloud_ConsumeValuesQueueClient struct {
	ctrl     *gomock.Controller
	recorder *MockFreshcloud_ConsumeValuesQueueClientMockRecorder
}

// MockFreshcloud_ConsumeValuesQueueClientMockRecorder is the mock recorder for MockFreshcloud_ConsumeValuesQueueClient.
type MockFreshcloud_ConsumeValuesQueueClientMockRecorder struct {
	mock *MockFreshcloud_ConsumeValuesQueueClient
}

// NewMockFreshcloud_ConsumeValuesQueueClient creates a new mock instance.
func NewMockFreshcloud_ConsumeValuesQueueClient(ctrl *gomock.Controller) *MockFreshcloud_ConsumeValuesQueueClient {
	mock := &MockFreshcloud_ConsumeValuesQueueClient{ctrl: ctrl}
	mock.recorder = &MockFreshcloud_ConsumeValuesQueueClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFreshcloud_ConsumeValuesQueueClient) EXPECT() *MockFreshcloud_ConsumeValuesQueueClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockFreshcloud_ConsumeValuesQueueClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockFreshcloud_ConsumeValuesQueueClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockFreshcloud_ConsumeValuesQueueClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockFreshcloud_ConsumeValuesQueueClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFreshcloud_ConsumeValuesQueueClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFreshcloud_ConsumeValuesQueueClient)(nil).Context))
}

// Header mocks base method.
func (m *MockFreshcloud_ConsumeValuesQueueClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockFreshcloud_ConsumeValuesQueueClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockFreshcloud_ConsumeValuesQueueClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockFreshcloud_ConsumeValuesQueueClient) Recv() (*freshcloud.ConsumeValuesQueueResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*freshcloud.ConsumeValuesQueueResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockFreshcloud_ConsumeValuesQueueClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockFreshcloud_ConsumeValuesQueueClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockFreshcloud_ConsumeValuesQueueClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockFreshcloud_ConsumeValuesQueueClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFreshcloud_ConsumeValuesQueueClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockFreshcloud_ConsumeValuesQueueClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockFreshcloud_ConsumeValuesQueueClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFreshcloud_ConsumeValuesQueueClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockFreshcloud_ConsumeValuesQueueClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockFreshcloud_ConsumeValuesQueueClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockFreshcloud_ConsumeValuesQueueClient)(nil).Trailer))
}

// MockFreshcloudServer is a mock of FreshcloudServer interface.
type MockFreshcloudServer struct {
	ctrl     *gomock.Controller
	recorder *MockFreshcloudServerMockRecorder
}

// MockFreshcloudServerMockRecorder is the mock recorder for MockFreshcloudServer.
type MockFreshcloudServerMockRecorder struct {
	mock *MockFreshcloudServer
}

// NewMockFreshcloudServer creates a new mock instance.
func NewMockFreshcloudServer(ctrl *gomock.Controller) *MockFreshcloudServer {
	mock := &MockFreshcloudServer{ctrl: ctrl}
	mock.recorder = &MockFreshcloudServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFreshcloudServer) EXPECT() *MockFreshcloudServerMockRecorder {
	return m.recorder
}

// ConsumeValuesQueue mocks base method.
func (m *MockFreshcloudServer) ConsumeValuesQueue(arg0 *freshcloud.ConsumeValuesQueueRequest, arg1 freshcloud.Freshcloud_ConsumeValuesQueueServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeValuesQueue", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsumeValuesQueue indicates an expected call of ConsumeValuesQueue.
func (mr *MockFreshcloudServerMockRecorder) ConsumeValuesQueue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeValuesQueue", reflect.TypeOf((*MockFreshcloudServer)(nil).ConsumeValuesQueue), arg0, arg1)
}

// CreateApp mocks base method.
func (m *MockFreshcloudServer) CreateApp(arg0 context.Context, arg1 *freshcloud.CreateAppRequest) (*freshcloud.CreateAppResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApp", arg0, arg1)
	ret0, _ := ret[0].(*freshcloud.CreateAppResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApp indicates an expected call of CreateApp.
func (mr *MockFreshcloudServerMockRecorder) CreateApp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApp", reflect.TypeOf((*MockFreshcloudServer)(nil).CreateApp), arg0, arg1)
}

// DeleteApp mocks base method.
func (m *MockFreshcloudServer) DeleteApp(arg0 context.Context, arg1 *freshcloud.DeleteAppRequest) (*freshcloud.DeleteAppResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApp", arg0, arg1)
	ret0, _ := ret[0].(*freshcloud.DeleteAppResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApp indicates an expected call of DeleteApp.
func (mr *MockFreshcloudServerMockRecorder) DeleteApp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApp", reflect.TypeOf((*MockFreshcloudServer)(nil).DeleteApp), arg0, arg1)
}

// DeleteValueDictionary mocks base method.
func (m *MockFreshcloudServer) DeleteValueDictionary(arg0 context.Context, arg1 *freshcloud.DeleteValueDictionaryRequest) (*freshcloud.DeleteValueDictionaryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteValueDictionary", arg0, arg1)
	ret0, _ := ret[0].(*freshcloud.DeleteValueDictionaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteValueDictionary indicates an expected call of DeleteValueDictionary.
func (mr *MockFreshcloudServerMockRecorder) DeleteValueDictionary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteValueDictionary", reflect.TypeOf((*MockFreshcloudServer)(nil).DeleteValueDictionary), arg0, arg1)
}

// DeployApp mocks base method.
func (m *MockFreshcloudServer) DeployApp(arg0 context.Context, arg1 *freshcloud.DeployAppRequest) (*freshcloud.DeployAppResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployApp", arg0, arg1)
	ret0, _ := ret[0].(*freshcloud.DeployAppResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeployApp indicates an expected call of DeployApp.
func (mr *MockFreshcloudServerMockRecorder) DeployApp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployApp", reflect.TypeOf((*MockFreshcloudServer)(nil).DeployApp), arg0, arg1)
}

// ExistsValueDictionary mocks base method.
func (m *MockFreshcloudServer) ExistsValueDictionary(arg0 context.Context, arg1 *freshcloud.ExistsValueDictionaryRequest) (*freshcloud.ExistsValueDictionaryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsValueDictionary", arg0, arg1)
	ret0, _ := ret[0].(*freshcloud.ExistsValueDictionaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsValueDictionary indicates an expected call of ExistsValueDictionary.
func (mr *MockFreshcloudServerMockRecorder) ExistsValueDictionary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsValueDictionary", reflect.TypeOf((*MockFreshcloudServer)(nil).ExistsValueDictionary), arg0, arg1)
}

// GetValueDictionary mocks base method.
func (m *MockFreshcloudServer) GetValueDictionary(arg0 context.Context, arg1 *freshcloud.GetValueDictionaryRequest) (*freshcloud.GetValueDictionaryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValueDictionary", arg0, arg1)
	ret0, _ := ret[0].(*freshcloud.GetValueDictionaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValueDictionary indicates an expected call of GetValueDictionary.
func (mr *MockFreshcloudServerMockRecorder) GetValueDictionary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValueDictionary", reflect.TypeOf((*MockFreshcloudServer)(nil).GetValueDictionary), arg0, arg1)
}

// LengthDictionary mocks base method.
func (m *MockFreshcloudServer) LengthDictionary(arg0 context.Context, arg1 *freshcloud.LengthDictionaryRequest) (*freshcloud.LengthDictionaryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LengthDictionary", arg0, arg1)
	ret0, _ := ret[0].(*freshcloud.LengthDictionaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LengthDictionary indicates an expected call of LengthDictionary.
func (mr *MockFreshcloudServerMockRecorder) LengthDictionary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LengthDictionary", reflect.TypeOf((*MockFreshcloudServer)(nil).LengthDictionary), arg0, arg1)
}

// ListApps mocks base method.
func (m *MockFreshcloudServer) ListApps(arg0 context.Context, arg1 *emptypb.Empty) (*freshcloud.ListAppsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApps", arg0, arg1)
	ret0, _ := ret[0].(*freshcloud.ListAppsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApps indicates an expected call of ListApps.
func (mr *MockFreshcloudServerMockRecorder) ListApps(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApps", reflect.TypeOf((*MockFreshcloudServer)(nil).ListApps), arg0, arg1)
}

// LoadSecretsFromAPI mocks base method.
func (m *MockFreshcloudServer) LoadSecretsFromAPI(arg0 context.Context, arg1 *freshcloud.LoadSecretsFromAPIRequest) (*freshcloud.LoadSecretsFromAPIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadSecretsFromAPI", arg0, arg1)
	ret0, _ := ret[0].(*freshcloud.LoadSecretsFromAPIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadSecretsFromAPI indicates an expected call of LoadSecretsFromAPI.
func (mr *MockFreshcloudServerMockRecorder) LoadSecretsFromAPI(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadSecretsFromAPI", reflect.TypeOf((*MockFreshcloudServer)(nil).LoadSecretsFromAPI), arg0, arg1)
}

// LogsApp mocks base method.
func (m *MockFreshcloudServer) LogsApp(arg0 *freshcloud.LogsAppRequest, arg1 freshcloud.Freshcloud_LogsAppServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogsApp", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogsApp indicates an expected call of LogsApp.
func (mr *MockFreshcloudServerMockRecorder) LogsApp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogsApp", reflect.TypeOf((*MockFreshcloudServer)(nil).LogsApp), arg0, arg1)
}

// Ping mocks base method.
func (m *MockFreshcloudServer) Ping(arg0 context.Context, arg1 *emptypb.Empty) (*freshcloud.PingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0, arg1)
	ret0, _ := ret[0].(*freshcloud.PingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockFreshcloudServerMockRecorder) Ping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockFreshcloudServer)(nil).Ping), arg0, arg1)
}

// PopValueDictionary mocks base method.
func (m *MockFreshcloudServer) PopValueDictionary(arg0 context.Context, arg1 *freshcloud.PopValueDictionaryRequest) (*freshcloud.PopValueDictionaryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PopValueDictionary", arg0, arg1)
	ret0, _ := ret[0].(*freshcloud.PopValueDictionaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PopValueDictionary indicates an expected call of PopValueDictionary.
func (mr *MockFreshcloudServerMockRecorder) PopValueDictionary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PopValueDictionary", reflect.TypeOf((*MockFreshcloudServer)(nil).PopValueDictionary), arg0, arg1)
}

// ProduceValueQueue mocks base method.
func (m *MockFreshcloudServer) ProduceValueQueue(arg0 context.Context, arg1 *freshcloud.ProduceValueQueueRequest) (*freshcloud.ProduceValueQueueResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProduceValueQueue", arg0, arg1)
	ret0, _ := ret[0].(*freshcloud.ProduceValueQueueResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProduceValueQueue indicates an expected call of ProduceValueQueue.
func (mr *MockFreshcloudServerMockRecorder) ProduceValueQueue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceValueQueue", reflect.TypeOf((*MockFreshcloudServer)(nil).ProduceValueQueue), arg0, arg1)
}

// PutValueDictionary mocks base method.
func (m *MockFreshcloudServer) PutValueDictionary(arg0 context.Context, arg1 *freshcloud.PutValueDictionaryRequest) (*freshcloud.PutValueDictionaryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutValueDictionary", arg0, arg1)
	ret0, _ := ret[0].(*freshcloud.PutValueDictionaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutValueDictionary indicates an expected call of PutValueDictionary.
func (mr *MockFreshcloudServerMockRecorder) PutValueDictionary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutValueDictionary", reflect.TypeOf((*MockFreshcloudServer)(nil).PutValueDictionary), arg0, arg1)
}

// StopApp mocks base method.
func (m *MockFreshcloudServer) StopApp(arg0 context.Context, arg1 *freshcloud.StopAppRequest) (*freshcloud.StopAppResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopApp", arg0, arg1)
	ret0, _ := ret[0].(*freshcloud.StopAppResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopApp indicates an expected call of StopApp.
func (mr *MockFreshcloudServerMockRecorder) StopApp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopApp", reflect.TypeOf((*MockFreshcloudServer)(nil).StopApp), arg0, arg1)
}

// MockUnsafeFreshcloudServer is a mock of UnsafeFreshcloudServer interface.
type MockUnsafeFreshcloudServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeFreshcloudServerMockRecorder
}

// MockUnsafeFreshcloudServerMockRecorder is the mock recorder for MockUnsafeFreshcloudServer.
type MockUnsafeFreshcloudServerMockRecorder struct {
	mock *MockUnsafeFreshcloudServer
}

// NewMockUnsafeFreshcloudServer creates a new mock instance.
func NewMockUnsafeFreshcloudServer(ctrl *gomock.Controller) *MockUnsafeFreshcloudServer {
	mock := &MockUnsafeFreshcloudServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeFreshcloudServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeFreshcloudServer) EXPECT() *MockUnsafeFreshcloudServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedFreshcloudServer mocks base method.
func (m *MockUnsafeFreshcloudServer) mustEmbedUnimplementedFreshcloudServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFreshcloudServer")
}

// mustEmbedUnimplementedFreshcloudServer indicates an expected call of mustEmbedUnimplementedFreshcloudServer.
func (mr *MockUnsafeFreshcloudServerMockRecorder) mustEmbedUnimplementedFreshcloudServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFreshcloudServer", reflect.TypeOf((*MockUnsafeFreshcloudServer)(nil).mustEmbedUnimplementedFreshcloudServer))
}

// MockFreshcloud_LogsAppServer is a mock of Freshcloud_LogsAppServer interface.
type MockFreshcloud_LogsAppServer struct {
	ctrl     *gomock.Controller
	recorder *MockFreshcloud_LogsAppServerMockRecorder
}

// MockFreshcloud_LogsAppServerMockRecorder is the mock recorder for MockFreshcloud_LogsAppServer.
type MockFreshcloud_LogsAppServerMockRecorder struct {
	mock *MockFreshcloud_LogsAppServer
}

// NewMockFreshcloud_LogsAppServer creates a new mock instance.
func NewMockFreshcloud_LogsAppServer(ctrl *gomock.Controller) *MockFreshcloud_LogsAppServer {
	mock := &MockFreshcloud_LogsAppServer{ctrl: ctrl}
	mock.recorder = &MockFreshcloud_LogsAppServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFreshcloud_LogsAppServer) EXPECT() *MockFreshcloud_LogsAppServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockFreshcloud_LogsAppServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFreshcloud_LogsAppServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFreshcloud_LogsAppServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockFreshcloud_LogsAppServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockFreshcloud_LogsAppServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFreshcloud_LogsAppServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockFreshcloud_LogsAppServer) Send(arg0 *freshcloud.LogsAppResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockFreshcloud_LogsAppServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockFreshcloud_LogsAppServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockFreshcloud_LogsAppServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockFreshcloud_LogsAppServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockFreshcloud_LogsAppServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockFreshcloud_LogsAppServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockFreshcloud_LogsAppServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFreshcloud_LogsAppServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockFreshcloud_LogsAppServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockFreshcloud_LogsAppServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockFreshcloud_LogsAppServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockFreshcloud_LogsAppServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockFreshcloud_LogsAppServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockFreshcloud_LogsAppServer)(nil).SetTrailer), arg0)
}

// MockFreshcloud_ConsumeValuesQueueServer is a mock of Freshcloud_ConsumeValuesQueueServer interface.
type MockFreshcloud_ConsumeValuesQueueServer struct {
	ctrl     *gomock.Controller
	recorder *MockFreshcloud_ConsumeValuesQueueServerMockRecorder
}

// MockFreshcloud_ConsumeValuesQueueServerMockRecorder is the mock recorder for MockFreshcloud_ConsumeValuesQueueServer.
type MockFreshcloud_ConsumeValuesQueueServerMockRecorder struct {
	mock *MockFreshcloud_ConsumeValuesQueueServer
}

// NewMockFreshcloud_ConsumeValuesQueueServer creates a new mock instance.
func NewMockFreshcloud_ConsumeValuesQueueServer(ctrl *gomock.Controller) *MockFreshcloud_ConsumeValuesQueueServer {
	mock := &MockFreshcloud_ConsumeValuesQueueServer{ctrl: ctrl}
	mock.recorder = &MockFreshcloud_ConsumeValuesQueueServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFreshcloud_ConsumeValuesQueueServer) EXPECT() *MockFreshcloud_ConsumeValuesQueueServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockFreshcloud_ConsumeValuesQueueServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFreshcloud_ConsumeValuesQueueServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFreshcloud_ConsumeValuesQueueServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockFreshcloud_ConsumeValuesQueueServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockFreshcloud_ConsumeValuesQueueServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFreshcloud_ConsumeValuesQueueServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockFreshcloud_ConsumeValuesQueueServer) Send(arg0 *freshcloud.ConsumeValuesQueueResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockFreshcloud_ConsumeValuesQueueServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockFreshcloud_ConsumeValuesQueueServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockFreshcloud_ConsumeValuesQueueServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockFreshcloud_ConsumeValuesQueueServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockFreshcloud_ConsumeValuesQueueServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockFreshcloud_ConsumeValuesQueueServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockFreshcloud_ConsumeValuesQueueServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFreshcloud_ConsumeValuesQueueServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockFreshcloud_ConsumeValuesQueueServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockFreshcloud_ConsumeValuesQueueServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockFreshcloud_ConsumeValuesQueueServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockFreshcloud_ConsumeValuesQueueServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockFreshcloud_ConsumeValuesQueueServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockFreshcloud_ConsumeValuesQueueServer)(nil).SetTrailer), arg0)
}
