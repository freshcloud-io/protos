// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: freshcloud.proto

package freshcloud

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Freshcloud_CreateApp_FullMethodName             = "/freshcloud.Freshcloud/CreateApp"
	Freshcloud_StopApp_FullMethodName               = "/freshcloud.Freshcloud/StopApp"
	Freshcloud_DeleteApp_FullMethodName             = "/freshcloud.Freshcloud/DeleteApp"
	Freshcloud_LogsApp_FullMethodName               = "/freshcloud.Freshcloud/LogsApp"
	Freshcloud_ListApps_FullMethodName              = "/freshcloud.Freshcloud/ListApps"
	Freshcloud_DeployApp_FullMethodName             = "/freshcloud.Freshcloud/DeployApp"
	Freshcloud_GetValueDictionary_FullMethodName    = "/freshcloud.Freshcloud/GetValueDictionary"
	Freshcloud_ExistsValueDictionary_FullMethodName = "/freshcloud.Freshcloud/ExistsValueDictionary"
	Freshcloud_PutValueDictionary_FullMethodName    = "/freshcloud.Freshcloud/PutValueDictionary"
	Freshcloud_DeleteValueDictionary_FullMethodName = "/freshcloud.Freshcloud/DeleteValueDictionary"
	Freshcloud_PopValueDictionary_FullMethodName    = "/freshcloud.Freshcloud/PopValueDictionary"
	Freshcloud_LengthDictionary_FullMethodName      = "/freshcloud.Freshcloud/LengthDictionary"
	Freshcloud_ProduceValueQueue_FullMethodName     = "/freshcloud.Freshcloud/ProduceValueQueue"
	Freshcloud_ConsumeValuesQueue_FullMethodName    = "/freshcloud.Freshcloud/ConsumeValuesQueue"
	Freshcloud_LoadSecretsFromAPI_FullMethodName    = "/freshcloud.Freshcloud/LoadSecretsFromAPI"
	Freshcloud_Ping_FullMethodName                  = "/freshcloud.Freshcloud/Ping"
)

// FreshcloudClient is the client API for Freshcloud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FreshcloudClient interface {
	// Application functions
	CreateApp(ctx context.Context, in *CreateAppRequest, opts ...grpc.CallOption) (*CreateAppResponse, error)
	StopApp(ctx context.Context, in *StopAppRequest, opts ...grpc.CallOption) (*StopAppResponse, error)
	DeleteApp(ctx context.Context, in *DeleteAppRequest, opts ...grpc.CallOption) (*DeleteAppResponse, error)
	LogsApp(ctx context.Context, in *LogsAppRequest, opts ...grpc.CallOption) (Freshcloud_LogsAppClient, error)
	ListApps(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListAppsResponse, error)
	DeployApp(ctx context.Context, in *DeployAppRequest, opts ...grpc.CallOption) (*DeployAppResponse, error)
	// Dictionary functions
	GetValueDictionary(ctx context.Context, in *GetValueDictionaryRequest, opts ...grpc.CallOption) (*GetValueDictionaryResponse, error)
	ExistsValueDictionary(ctx context.Context, in *ExistsValueDictionaryRequest, opts ...grpc.CallOption) (*ExistsValueDictionaryResponse, error)
	PutValueDictionary(ctx context.Context, in *PutValueDictionaryRequest, opts ...grpc.CallOption) (*PutValueDictionaryResponse, error)
	DeleteValueDictionary(ctx context.Context, in *DeleteValueDictionaryRequest, opts ...grpc.CallOption) (*DeleteValueDictionaryResponse, error)
	PopValueDictionary(ctx context.Context, in *PopValueDictionaryRequest, opts ...grpc.CallOption) (*PopValueDictionaryResponse, error)
	LengthDictionary(ctx context.Context, in *LengthDictionaryRequest, opts ...grpc.CallOption) (*LengthDictionaryResponse, error)
	// Queue functions
	ProduceValueQueue(ctx context.Context, in *ProduceValueQueueRequest, opts ...grpc.CallOption) (*ProduceValueQueueResponse, error)
	ConsumeValuesQueue(ctx context.Context, in *ConsumeValuesQueueRequest, opts ...grpc.CallOption) (Freshcloud_ConsumeValuesQueueClient, error)
	// SecretHandler functions
	LoadSecretsFromAPI(ctx context.Context, in *LoadSecretsFromAPIRequest, opts ...grpc.CallOption) (*LoadSecretsFromAPIResponse, error)
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PingResponse, error)
}

type freshcloudClient struct {
	cc grpc.ClientConnInterface
}

func NewFreshcloudClient(cc grpc.ClientConnInterface) FreshcloudClient {
	return &freshcloudClient{cc}
}

func (c *freshcloudClient) CreateApp(ctx context.Context, in *CreateAppRequest, opts ...grpc.CallOption) (*CreateAppResponse, error) {
	out := new(CreateAppResponse)
	err := c.cc.Invoke(ctx, Freshcloud_CreateApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freshcloudClient) StopApp(ctx context.Context, in *StopAppRequest, opts ...grpc.CallOption) (*StopAppResponse, error) {
	out := new(StopAppResponse)
	err := c.cc.Invoke(ctx, Freshcloud_StopApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freshcloudClient) DeleteApp(ctx context.Context, in *DeleteAppRequest, opts ...grpc.CallOption) (*DeleteAppResponse, error) {
	out := new(DeleteAppResponse)
	err := c.cc.Invoke(ctx, Freshcloud_DeleteApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freshcloudClient) LogsApp(ctx context.Context, in *LogsAppRequest, opts ...grpc.CallOption) (Freshcloud_LogsAppClient, error) {
	stream, err := c.cc.NewStream(ctx, &Freshcloud_ServiceDesc.Streams[0], Freshcloud_LogsApp_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &freshcloudLogsAppClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Freshcloud_LogsAppClient interface {
	Recv() (*LogsAppResponse, error)
	grpc.ClientStream
}

type freshcloudLogsAppClient struct {
	grpc.ClientStream
}

func (x *freshcloudLogsAppClient) Recv() (*LogsAppResponse, error) {
	m := new(LogsAppResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *freshcloudClient) ListApps(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListAppsResponse, error) {
	out := new(ListAppsResponse)
	err := c.cc.Invoke(ctx, Freshcloud_ListApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freshcloudClient) DeployApp(ctx context.Context, in *DeployAppRequest, opts ...grpc.CallOption) (*DeployAppResponse, error) {
	out := new(DeployAppResponse)
	err := c.cc.Invoke(ctx, Freshcloud_DeployApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freshcloudClient) GetValueDictionary(ctx context.Context, in *GetValueDictionaryRequest, opts ...grpc.CallOption) (*GetValueDictionaryResponse, error) {
	out := new(GetValueDictionaryResponse)
	err := c.cc.Invoke(ctx, Freshcloud_GetValueDictionary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freshcloudClient) ExistsValueDictionary(ctx context.Context, in *ExistsValueDictionaryRequest, opts ...grpc.CallOption) (*ExistsValueDictionaryResponse, error) {
	out := new(ExistsValueDictionaryResponse)
	err := c.cc.Invoke(ctx, Freshcloud_ExistsValueDictionary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freshcloudClient) PutValueDictionary(ctx context.Context, in *PutValueDictionaryRequest, opts ...grpc.CallOption) (*PutValueDictionaryResponse, error) {
	out := new(PutValueDictionaryResponse)
	err := c.cc.Invoke(ctx, Freshcloud_PutValueDictionary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freshcloudClient) DeleteValueDictionary(ctx context.Context, in *DeleteValueDictionaryRequest, opts ...grpc.CallOption) (*DeleteValueDictionaryResponse, error) {
	out := new(DeleteValueDictionaryResponse)
	err := c.cc.Invoke(ctx, Freshcloud_DeleteValueDictionary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freshcloudClient) PopValueDictionary(ctx context.Context, in *PopValueDictionaryRequest, opts ...grpc.CallOption) (*PopValueDictionaryResponse, error) {
	out := new(PopValueDictionaryResponse)
	err := c.cc.Invoke(ctx, Freshcloud_PopValueDictionary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freshcloudClient) LengthDictionary(ctx context.Context, in *LengthDictionaryRequest, opts ...grpc.CallOption) (*LengthDictionaryResponse, error) {
	out := new(LengthDictionaryResponse)
	err := c.cc.Invoke(ctx, Freshcloud_LengthDictionary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freshcloudClient) ProduceValueQueue(ctx context.Context, in *ProduceValueQueueRequest, opts ...grpc.CallOption) (*ProduceValueQueueResponse, error) {
	out := new(ProduceValueQueueResponse)
	err := c.cc.Invoke(ctx, Freshcloud_ProduceValueQueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freshcloudClient) ConsumeValuesQueue(ctx context.Context, in *ConsumeValuesQueueRequest, opts ...grpc.CallOption) (Freshcloud_ConsumeValuesQueueClient, error) {
	stream, err := c.cc.NewStream(ctx, &Freshcloud_ServiceDesc.Streams[1], Freshcloud_ConsumeValuesQueue_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &freshcloudConsumeValuesQueueClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Freshcloud_ConsumeValuesQueueClient interface {
	Recv() (*ConsumeValuesQueueResponse, error)
	grpc.ClientStream
}

type freshcloudConsumeValuesQueueClient struct {
	grpc.ClientStream
}

func (x *freshcloudConsumeValuesQueueClient) Recv() (*ConsumeValuesQueueResponse, error) {
	m := new(ConsumeValuesQueueResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *freshcloudClient) LoadSecretsFromAPI(ctx context.Context, in *LoadSecretsFromAPIRequest, opts ...grpc.CallOption) (*LoadSecretsFromAPIResponse, error) {
	out := new(LoadSecretsFromAPIResponse)
	err := c.cc.Invoke(ctx, Freshcloud_LoadSecretsFromAPI_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freshcloudClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, Freshcloud_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FreshcloudServer is the server API for Freshcloud service.
// All implementations should embed UnimplementedFreshcloudServer
// for forward compatibility
type FreshcloudServer interface {
	// Application functions
	CreateApp(context.Context, *CreateAppRequest) (*CreateAppResponse, error)
	StopApp(context.Context, *StopAppRequest) (*StopAppResponse, error)
	DeleteApp(context.Context, *DeleteAppRequest) (*DeleteAppResponse, error)
	LogsApp(*LogsAppRequest, Freshcloud_LogsAppServer) error
	ListApps(context.Context, *emptypb.Empty) (*ListAppsResponse, error)
	DeployApp(context.Context, *DeployAppRequest) (*DeployAppResponse, error)
	// Dictionary functions
	GetValueDictionary(context.Context, *GetValueDictionaryRequest) (*GetValueDictionaryResponse, error)
	ExistsValueDictionary(context.Context, *ExistsValueDictionaryRequest) (*ExistsValueDictionaryResponse, error)
	PutValueDictionary(context.Context, *PutValueDictionaryRequest) (*PutValueDictionaryResponse, error)
	DeleteValueDictionary(context.Context, *DeleteValueDictionaryRequest) (*DeleteValueDictionaryResponse, error)
	PopValueDictionary(context.Context, *PopValueDictionaryRequest) (*PopValueDictionaryResponse, error)
	LengthDictionary(context.Context, *LengthDictionaryRequest) (*LengthDictionaryResponse, error)
	// Queue functions
	ProduceValueQueue(context.Context, *ProduceValueQueueRequest) (*ProduceValueQueueResponse, error)
	ConsumeValuesQueue(*ConsumeValuesQueueRequest, Freshcloud_ConsumeValuesQueueServer) error
	// SecretHandler functions
	LoadSecretsFromAPI(context.Context, *LoadSecretsFromAPIRequest) (*LoadSecretsFromAPIResponse, error)
	Ping(context.Context, *emptypb.Empty) (*PingResponse, error)
}

// UnimplementedFreshcloudServer should be embedded to have forward compatible implementations.
type UnimplementedFreshcloudServer struct {
}

func (UnimplementedFreshcloudServer) CreateApp(context.Context, *CreateAppRequest) (*CreateAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApp not implemented")
}
func (UnimplementedFreshcloudServer) StopApp(context.Context, *StopAppRequest) (*StopAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopApp not implemented")
}
func (UnimplementedFreshcloudServer) DeleteApp(context.Context, *DeleteAppRequest) (*DeleteAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApp not implemented")
}
func (UnimplementedFreshcloudServer) LogsApp(*LogsAppRequest, Freshcloud_LogsAppServer) error {
	return status.Errorf(codes.Unimplemented, "method LogsApp not implemented")
}
func (UnimplementedFreshcloudServer) ListApps(context.Context, *emptypb.Empty) (*ListAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApps not implemented")
}
func (UnimplementedFreshcloudServer) DeployApp(context.Context, *DeployAppRequest) (*DeployAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployApp not implemented")
}
func (UnimplementedFreshcloudServer) GetValueDictionary(context.Context, *GetValueDictionaryRequest) (*GetValueDictionaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValueDictionary not implemented")
}
func (UnimplementedFreshcloudServer) ExistsValueDictionary(context.Context, *ExistsValueDictionaryRequest) (*ExistsValueDictionaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistsValueDictionary not implemented")
}
func (UnimplementedFreshcloudServer) PutValueDictionary(context.Context, *PutValueDictionaryRequest) (*PutValueDictionaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutValueDictionary not implemented")
}
func (UnimplementedFreshcloudServer) DeleteValueDictionary(context.Context, *DeleteValueDictionaryRequest) (*DeleteValueDictionaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteValueDictionary not implemented")
}
func (UnimplementedFreshcloudServer) PopValueDictionary(context.Context, *PopValueDictionaryRequest) (*PopValueDictionaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PopValueDictionary not implemented")
}
func (UnimplementedFreshcloudServer) LengthDictionary(context.Context, *LengthDictionaryRequest) (*LengthDictionaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LengthDictionary not implemented")
}
func (UnimplementedFreshcloudServer) ProduceValueQueue(context.Context, *ProduceValueQueueRequest) (*ProduceValueQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProduceValueQueue not implemented")
}
func (UnimplementedFreshcloudServer) ConsumeValuesQueue(*ConsumeValuesQueueRequest, Freshcloud_ConsumeValuesQueueServer) error {
	return status.Errorf(codes.Unimplemented, "method ConsumeValuesQueue not implemented")
}
func (UnimplementedFreshcloudServer) LoadSecretsFromAPI(context.Context, *LoadSecretsFromAPIRequest) (*LoadSecretsFromAPIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadSecretsFromAPI not implemented")
}
func (UnimplementedFreshcloudServer) Ping(context.Context, *emptypb.Empty) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

// UnsafeFreshcloudServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FreshcloudServer will
// result in compilation errors.
type UnsafeFreshcloudServer interface {
	mustEmbedUnimplementedFreshcloudServer()
}

func RegisterFreshcloudServer(s grpc.ServiceRegistrar, srv FreshcloudServer) {
	s.RegisterService(&Freshcloud_ServiceDesc, srv)
}

func _Freshcloud_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreshcloudServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Freshcloud_CreateApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreshcloudServer).CreateApp(ctx, req.(*CreateAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Freshcloud_StopApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreshcloudServer).StopApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Freshcloud_StopApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreshcloudServer).StopApp(ctx, req.(*StopAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Freshcloud_DeleteApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreshcloudServer).DeleteApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Freshcloud_DeleteApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreshcloudServer).DeleteApp(ctx, req.(*DeleteAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Freshcloud_LogsApp_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogsAppRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FreshcloudServer).LogsApp(m, &freshcloudLogsAppServer{stream})
}

type Freshcloud_LogsAppServer interface {
	Send(*LogsAppResponse) error
	grpc.ServerStream
}

type freshcloudLogsAppServer struct {
	grpc.ServerStream
}

func (x *freshcloudLogsAppServer) Send(m *LogsAppResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Freshcloud_ListApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreshcloudServer).ListApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Freshcloud_ListApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreshcloudServer).ListApps(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Freshcloud_DeployApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreshcloudServer).DeployApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Freshcloud_DeployApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreshcloudServer).DeployApp(ctx, req.(*DeployAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Freshcloud_GetValueDictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValueDictionaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreshcloudServer).GetValueDictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Freshcloud_GetValueDictionary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreshcloudServer).GetValueDictionary(ctx, req.(*GetValueDictionaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Freshcloud_ExistsValueDictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistsValueDictionaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreshcloudServer).ExistsValueDictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Freshcloud_ExistsValueDictionary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreshcloudServer).ExistsValueDictionary(ctx, req.(*ExistsValueDictionaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Freshcloud_PutValueDictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutValueDictionaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreshcloudServer).PutValueDictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Freshcloud_PutValueDictionary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreshcloudServer).PutValueDictionary(ctx, req.(*PutValueDictionaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Freshcloud_DeleteValueDictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteValueDictionaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreshcloudServer).DeleteValueDictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Freshcloud_DeleteValueDictionary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreshcloudServer).DeleteValueDictionary(ctx, req.(*DeleteValueDictionaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Freshcloud_PopValueDictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PopValueDictionaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreshcloudServer).PopValueDictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Freshcloud_PopValueDictionary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreshcloudServer).PopValueDictionary(ctx, req.(*PopValueDictionaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Freshcloud_LengthDictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LengthDictionaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreshcloudServer).LengthDictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Freshcloud_LengthDictionary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreshcloudServer).LengthDictionary(ctx, req.(*LengthDictionaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Freshcloud_ProduceValueQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProduceValueQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreshcloudServer).ProduceValueQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Freshcloud_ProduceValueQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreshcloudServer).ProduceValueQueue(ctx, req.(*ProduceValueQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Freshcloud_ConsumeValuesQueue_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConsumeValuesQueueRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FreshcloudServer).ConsumeValuesQueue(m, &freshcloudConsumeValuesQueueServer{stream})
}

type Freshcloud_ConsumeValuesQueueServer interface {
	Send(*ConsumeValuesQueueResponse) error
	grpc.ServerStream
}

type freshcloudConsumeValuesQueueServer struct {
	grpc.ServerStream
}

func (x *freshcloudConsumeValuesQueueServer) Send(m *ConsumeValuesQueueResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Freshcloud_LoadSecretsFromAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadSecretsFromAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreshcloudServer).LoadSecretsFromAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Freshcloud_LoadSecretsFromAPI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreshcloudServer).LoadSecretsFromAPI(ctx, req.(*LoadSecretsFromAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Freshcloud_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreshcloudServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Freshcloud_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreshcloudServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Freshcloud_ServiceDesc is the grpc.ServiceDesc for Freshcloud service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Freshcloud_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "freshcloud.Freshcloud",
	HandlerType: (*FreshcloudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateApp",
			Handler:    _Freshcloud_CreateApp_Handler,
		},
		{
			MethodName: "StopApp",
			Handler:    _Freshcloud_StopApp_Handler,
		},
		{
			MethodName: "DeleteApp",
			Handler:    _Freshcloud_DeleteApp_Handler,
		},
		{
			MethodName: "ListApps",
			Handler:    _Freshcloud_ListApps_Handler,
		},
		{
			MethodName: "DeployApp",
			Handler:    _Freshcloud_DeployApp_Handler,
		},
		{
			MethodName: "GetValueDictionary",
			Handler:    _Freshcloud_GetValueDictionary_Handler,
		},
		{
			MethodName: "ExistsValueDictionary",
			Handler:    _Freshcloud_ExistsValueDictionary_Handler,
		},
		{
			MethodName: "PutValueDictionary",
			Handler:    _Freshcloud_PutValueDictionary_Handler,
		},
		{
			MethodName: "DeleteValueDictionary",
			Handler:    _Freshcloud_DeleteValueDictionary_Handler,
		},
		{
			MethodName: "PopValueDictionary",
			Handler:    _Freshcloud_PopValueDictionary_Handler,
		},
		{
			MethodName: "LengthDictionary",
			Handler:    _Freshcloud_LengthDictionary_Handler,
		},
		{
			MethodName: "ProduceValueQueue",
			Handler:    _Freshcloud_ProduceValueQueue_Handler,
		},
		{
			MethodName: "LoadSecretsFromAPI",
			Handler:    _Freshcloud_LoadSecretsFromAPI_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Freshcloud_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LogsApp",
			Handler:       _Freshcloud_LogsApp_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ConsumeValuesQueue",
			Handler:       _Freshcloud_ConsumeValuesQueue_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "freshcloud.proto",
}
